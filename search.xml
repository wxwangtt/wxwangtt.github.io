<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何阅读Android项目的源码，快速梳理程序主线</title>
      <link href="/2022/01/18/ru-he-yue-du-android-xiang-mu-de-yuan-ma-kuai-su-shu-li-cheng-xu-zhu-xian/"/>
      <url>/2022/01/18/ru-he-yue-du-android-xiang-mu-de-yuan-ma-kuai-su-shu-li-cheng-xu-zhu-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要梳理程序主线"><a href="#为什么要梳理程序主线" class="headerlink" title="为什么要梳理程序主线"></a>为什么要梳理程序主线</h2><p><img src="%E5%9B%BE%E7%89%871.jpg"></p><hr><p>在工作中，经常会遇到从别人手里接手一个项目的代码，只针对其中某一个功能修修补补，或者新增一个模块这样的工作。如果对方不能花太多时间帮助梳理，并且代码缺少必要的注释时，自己拿到这样一个源码，往往不知从哪里下手，找不到需要修改的模块在什么位置。特别是工程比较大，代码比较多时，把代码一行一行读下来很不现实，事倍功半。最近读了一份Android studio工程的源码，总结了一些规律和套路，同大家分享。</p><h2 id="先把代码跑通"><a href="#先把代码跑通" class="headerlink" title="先把代码跑通"></a>先把代码跑通</h2><p><img src="%E5%9B%BE%E7%89%872.jpg"></p><hr><p>首先要先把代码跑通，这是一切工作开展的前提。代码从一台开发机拷贝到另一台，由于编译器设置的不同，或是环境配置的不同，一般来说不能一次性编译通过，会报各种各样奇怪的错误。常见的错误有：Android studio版本太低需更新；Android studio在国内的更新服务器被墙，需要设置合适的镜像代理；SDK、NDK等外部依赖的软件开发工具包路径配置不一致；SDK版本号设置与本机环境不匹配等。这个过程要根据所报的错误百度解决，一般来说自己遇到的问题都有别人遇到过，可以参考。</p><h2 id="开始梳理主框架"><a href="#开始梳理主框架" class="headerlink" title="开始梳理主框架"></a>开始梳理主框架</h2><p><img src="%E5%9B%BE%E7%89%873.jpg"></p><hr><p>在编译器左侧区域选择Project视图，可以看到工程的文件结构。一般来说，<code>app &gt; src &gt; main &gt; java</code> 目录下，是我们需要研读的代码。</p><p>首先打开AndroidManifest.xml，找到一堆<code>&lt;uses-permission&gt;</code>下面的<code>&lt;application&gt;</code>以及里面所包含的<code>&lt;activity&gt;</code>，如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>uses-permission android:name<span class="token operator">=</span><span class="token string">"android.permission.READ_CONTACTS"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>uses-permission android:name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_CONTACTS"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>application    android:name<span class="token operator">=</span><span class="token string">".base.MyApplication"</span>    android:allowBackup<span class="token operator">=</span><span class="token string">"true"</span>    android:icon<span class="token operator">=</span><span class="token string">"@mipmap/ic_launcher"</span>    android:label<span class="token operator">=</span><span class="token string">"@string/app_name"</span>    android:supportsRtl<span class="token operator">=</span><span class="token string">"true"</span>    android:theme<span class="token operator">=</span><span class="token string">"@style/AppTheme"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>activity        android:name<span class="token operator">=</span><span class="token string">".show.WelcomeActivity"</span>        android:screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>        android:windowSoftInputMode<span class="token operator">=</span><span class="token string">"adjustResize|stateHidden"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>intent-filter<span class="token operator">></span>            <span class="token operator">&lt;</span>action android:name<span class="token operator">=</span><span class="token string">"android.intent.action.MAIN"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>category android:name<span class="token operator">=</span><span class="token string">"android.intent.category.LAUNCHER"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>/intent-filter<span class="token operator">></span>    <span class="token operator">&lt;</span>/activity<span class="token operator">></span>    <span class="token operator">&lt;</span>activity        android:name<span class="token operator">=</span><span class="token string">".show.MainActivity"</span>        android:screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>        android:windowSoftInputMode<span class="token operator">=</span><span class="token string">"adjustResize|stateHidden"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>activity        android:name<span class="token operator">=</span><span class="token string">".show.LoginActivity"</span>        android:launchMode<span class="token operator">=</span><span class="token string">"singleTask"</span>        android:screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>        android:windowSoftInputMode<span class="token operator">=</span><span class="token string">"adjustResize|stateHidden"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>activity        android:name<span class="token operator">=</span><span class="token string">".show.LocalActivity"</span>        android:screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>        android:windowSoftInputMode<span class="token operator">=</span><span class="token string">"adjustResize|stateHidden"</span> /<span class="token operator">></span></code></pre><p>以上截取了四个<code>&lt;activity&gt;</code>。每个<code>activity</code>可以理解为具有相对独立功能的一个窗口，应用程序打开后，根据程序逻辑，在各个<code>activity</code>之间跳转，以完成特定的功能。根据<code>activity</code>的<code>android:name</code>，可以大概猜测出这个<code>activity</code>所完成的功能。在这个程序中，我们可以根据字面意思来猜测：<code>WelcomeActivity</code>是欢迎界面；<code>MainActivity</code>是应用程序主界面，相当于根窗口；<code>LoginActivity</code>是用户登录界面，以此类推。其中，<code>WelcomeActivity</code>中包含这样两行代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>action android:name<span class="token operator">=</span><span class="token string">"android.intent.action.MAIN"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>category android:name<span class="token operator">=</span><span class="token string">"android.intent.category.LAUNCHER"</span> /<span class="token operator">></span></code></pre><p>这表示，该<code>activity</code>是应用程序打开后第一个启动的<code>activity</code>。</p><p>接下来，对应去阅读<code>WelcomeActivity</code>的java代码。</p><p>代码的位置在哪里呢？可以用文件名搜索的方法，也可以根据<code>AndroidManifest.xml</code>里指示的位置打开。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>manifest xmlns:android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    package<span class="token operator">=</span><span class="token string">"com.traffic.survey"</span><span class="token operator">></span></code></pre><p>根据<code>package</code>值，找到目录<code>com.traffic.survey</code>，再根据<code>WelcomeActivity</code>的<code>name</code>：<code>.show.WelcomeActivity</code>，找到<code>WelcomeActivity</code>的java代码。</p><p><img src="%E5%9B%BE%E7%89%874.jpg"></p><hr><p>打开文件后，可以看到java代码，可以看到有一些诸如<code>onCreate</code>，<code>init</code>等函数。因为我们的主要目的是梳理程序主框架，所以可以不用对代码细节研读太细，直接在文档中<kbd>Ctrl</kbd>+<kbd>F</kbd>，搜索关键字<code>“startActivity”</code>或者<code>“Intent”</code>，来快速定位到<code>activity</code>跳转的代码。</p><p>因为我们知道，在Android中实现窗口跳转需要调用如下API：</p><pre class=" language-bash"><code class="language-bash">startActivity<span class="token punctuation">(</span>new Intent<span class="token punctuation">(</span>this, newActivity.class<span class="token punctuation">))</span><span class="token punctuation">;</span></code></pre><p> 用搜索关键字的方法，可以提高读代码的效率，快速梳理各窗口之间的关系。比如，在<code>WelcomeActivity</code>中的搜索结果是这样的：</p><pre class=" language-bash"><code class="language-bash">public void onAnimationEnd<span class="token punctuation">(</span>Animator animator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TextUtils.isEmpty<span class="token punctuation">(</span>userId<span class="token punctuation">))</span> <span class="token punctuation">{</span>        startActivity<span class="token punctuation">(</span>new Intent<span class="token punctuation">(</span>WelcomeActivity.this, LoginActivity.class<span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        startActivity<span class="token punctuation">(</span>new Intent<span class="token punctuation">(</span>WelcomeActivity.this, MainActivity.class<span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    finish<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过这一小段，可以大概知道跳转逻辑。欢迎动画结束时，判断<code>userId</code>是不是空。如果是空，则跳转到<code>LoginActivity</code>（登录窗口）；如果非空，则跳转到<code>MainActivity</code>（主窗口）。</p><p>此时按住<kbd>Ctrl</kbd>键不放，用鼠标点击<code>LoginActivity</code>，可以直接跳转到LoginActivity的java代码。再用相同的关键字搜索方法，搜索LoginActivity的窗口跳转逻辑。</p><p>这样就可以快速梳理出整个程序的窗口跳转逻辑，快速定位到自己需要修改的代码在哪里。</p><h2 id="精读所需修改的代码的业务逻辑"><a href="#精读所需修改的代码的业务逻辑" class="headerlink" title="精读所需修改的代码的业务逻辑"></a>精读所需修改的代码的业务逻辑</h2><p>通过梳理主框架，已经定位到自己所需修改的代码位置时，需要精读此处的代码，彻底掌握这部分的业务逻辑，才能在此基础上修改。在这里不具体举例如何修改代码，只介绍如何找到该Activity对应的布局文件。</p><pre class=" language-bash"><code class="language-bash">protected void onCreate<span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    super.onCreate<span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    setContentView<span class="token punctuation">(</span>R.layout.activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    initWidget<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码是<code>MainActivity</code>的<code>onCreate</code>函数。此处的紫色斜体字<code>activity_main</code>，就是布局文件的名称。该布局文件的目录位置在：<code>app &gt; src &gt; main &gt; res &gt; layout &gt; activity_main.xml</code>。如下图所示：<br><img src="%E5%9B%BE%E7%89%875.jpg"></p><hr><p>打开这个<code>activity_main.xml</code>文件，默认会打开<code>Design</code>视图，能够直观地看到窗口的设计资源以及位置。在窗口左下角可以进行<code>Design</code>视图和<code>Text</code>视图的切换。<br><img src="%E5%9B%BE%E7%89%876.jpg"></p><hr><p>代码中的<code>R.id.xxx</code>，则都是该布局文件中的资源ID，可对应查找。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&nbsp;&nbsp;以上就是我读代码的心得。不对之处，请大家批评指正。或者还有什么别的技巧方法，欢迎留言交流。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码 </tag>
            
            <tag> 阅读 </tag>
            
            <tag> 主线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/17/hello-world/"/>
      <url>/2022/01/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
